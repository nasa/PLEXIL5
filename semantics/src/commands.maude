*** XFlag TODO: Review
fmod XFLAG is
  sort XFlag .
  ops idle invoked aborting : -> XFlag .
endfm

fmod COMMAND-HANDLE  is
  sort CommandHandle .
  op CommandSentToSystem   : -> CommandHandle .
  op CommandAccepted       : -> CommandHandle .
  op CommandRcvdBySystem   : -> CommandHandle .
  op CommandFailed         : -> CommandHandle .
  op CommandDenied         : -> CommandHandle .
  op CommandSuccess        : -> CommandHandle .
  op CommandInterfaceError : -> CommandHandle .
  op CommandHandleMax      : -> CommandHandle .
endfm

view CommandHandle from TRIV to COMMAND-HANDLE is
  sort Elt to CommandHandle .
endv

*** Command TODO: review
fmod COMMAND is
  protecting IDENTIFIER .
  protecting PARAMETER .
  protecting QUALIFIED .
  protecting COMMAND-HANDLE .
  protecting EXPRESSION .
  protecting MAYBE{Value} .

  sort CommandId .
  subsort NeQualified < CommandId .
  op cmdId : VariableExpression -> CommandId .

  sort Command .
  op _/_   : CommandId Parameters           -> Command [prec 20] .
  op _/_/_ : CommandId Parameters Qualified -> Command [prec 20] .

  var I : Identifier .
  var E : Expression .
  var P : Parameters .
  var Q : NeQualified .

  op qualifyVarNames : Command NeQualified -> Command .
  eq qualifyVarNames((I / P),Q) = (I / qualifyVarNamesAux(P,Q)) .

    op qualifyVarNamesAux : Parameters NeQualified -> Parameters .
    eq qualifyVarNamesAux(nilpar,Q) = nilpar .
    eq qualifyVarNamesAux((E P),Q) = (qualifyVarNames(E,Q) qualifyVarNamesAux(P,Q)) .

endfm

*** Command Info TODO: review
fmod COMMANDINFO is
  protecting ARGUMENTS .
  protecting QUALIFIED .
  protecting XFLAG .
  protecting COMMAND .
  protecting MAYBE{CommandHandle} .
  protecting MAYBE{Value} .
  sort CommandInfo .

  op _/_/_ : Arguments Qualified CommandHandle -> CommandInfo [prec 20] .
  op _/_/_ : Arguments Qualified XFlag -> CommandInfo [prec 20] .
  op cmdInfo : Command Arguments Qualified Maybe{CommandHandle} Maybe{Value} -> CommandInfo .
  op commDefault : Qualified -> CommandInfo .

  var Q : Qualified .

  eq commDefault( Q ) = nilarg / Q / idle .

endfm

fmod ACK is
  sort Ack .
  subsort Bool < Ack .
endfm

view Ack from TRIV to ACK is
  sort Elt to Ack .
endv

fmod PAIR is
  protecting EXPRESSION .
  protecting QID .

  sort Pair .
  op pair : Qid Expression -> Pair [ctor] .
endfm

view Pair from TRIV to PAIR is
  sort Elt to Pair .
endv

fmod UPDATE is
  protecting ACK .
  protecting LIST{Pair} .
  protecting QUALIFIED .
endfm