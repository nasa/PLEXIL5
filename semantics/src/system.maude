fmod CONFIG-BASE is
  sorts CellId Cell Config .
  subsort Cell < Config .
  op mtsoup : -> Config .
  op __ : Config Config -> Config [assoc comm id: mtsoup] .

  *** Cell handles
  op environment  : -> CellId .
  op nodes        : -> CellId .
  op memory       : -> CellId .
  op microacts    : -> CellId .
  op macroacts    : -> CellId .
  op interface    : -> CellId .
  op trace        : -> CellId .
  op generator    : -> CellId .

endfm

view Config from TRIV to CONFIG-BASE is
 sort Elt to Config .
endv

mod EMPTY-GENERATOR is
  protecting GENERATOR{Config} * (sort Generator{Config} to ExternalInputGenerator) .

  op noEnvGen : -> ExternalInputGenerator .
  eq generate(noEnvGen,Conf) = nilEInputsList .
  eq update(noEnvGen,Conf) = noEnvGen .
  eq isConsumed?(noEnvGen,Conf) = true .

  vars Conf : Config .

  op emptyEnvGen : Nat -> ExternalInputGenerator .
  eq generate(emptyEnvGen(s N:Nat),Conf) = noExternalInputs .
  eq generate(emptyEnvGen(0),Conf) = nilEInputsList .

  eq update(emptyEnvGen(s N:Nat),Conf) = emptyEnvGen(N:Nat) .

  eq isConsumed?(emptyEnvGen(s N:Nat),Conf) = false .
  eq isConsumed?(emptyEnvGen(0),Conf) = true [owise] .
endm

mod CONFIG is
  pr ACTION .
  pr ENVIRONMENTS .
  pr CONFIG-BASE .
  pr NODE .
  pr TRACE .
  pr EMPTY-GENERATOR .

  op `[_:_`] : CellId ActionSet              -> Cell [format (n d d ++i --i d)] .
  op `[_:_`] : CellId EnvironmentList        -> Cell [format (n d d ++i --i d)] .
  op `[_:_`] : CellId Configuration          -> Cell [format (n d d ++i --i d)] .
  op `[_:_`] : CellId TraceList              -> Cell [format (n d d ++i --i d)] .
  op `[_:_`] : CellId ExternalInputGenerator -> Cell [format (n d d ++i --i d)] .

  *** Constructors
  op emptyConfig : -> Config .
  eq emptyConfig
  = [ environment : mtenvironment ]
    [ nodes       : none          ]
    [ memory      : none          ]
    [ microacts   : mtactions     ]
    [ macroacts   : mtactions     ]
    [ trace       : niltrace      ]
    [ interface   : none          ]
    [ generator   : noEnvGen      ]
  .

  *** Modifiers
  op _/_ : Config Config -> [Config] [prec 80] .
  eq [ C : AS  ] Conf / [ C : AS'  ] Conf' = [ C : AS'  ] Conf / Conf' .
  eq [ C : EL  ] Conf / [ C : EL'  ] Conf' = [ C : EL'  ] Conf / Conf' .
  eq [ C : CS  ] Conf / [ C : CS'  ] Conf' = [ C : CS'  ] Conf / Conf' .
  eq [ C : TL  ] Conf / [ C : TL'  ] Conf' = [ C : TL'  ] Conf / Conf' .
  eq [ C : GEN ] Conf / [ C : GEN' ] Conf' = [ C : GEN' ] Conf / Conf' .
  eq Conf / mtsoup = Conf .

  op _//_ : Config Config -> Config [prec 80] .
  eq [ C : AS  ] Conf // [ C : AS'  ] Conf' = [ C : AS'  ] Conf // Conf' .
  eq [ C : EL  ] Conf // [ C : EL'  ] Conf' = [ C : EL'  ] Conf // Conf' .
  eq [ C : CS  ] Conf // [ C : CS'  ] Conf' = [ C : CS'  ] Conf // Conf' .
  eq [ C : TL  ] Conf // [ C : TL'  ] Conf' = [ C : TL'  ] Conf // Conf' .
  eq [ C : GEN ] Conf // [ C : GEN' ] Conf' = [ C : GEN' ] Conf // Conf' .
  eq Conf // Conf' = Conf Conf' [owise] .

  *** Observers
  op getNodes     : Config -> Configuration .
  eq getNodes(    [ nodes : CS ] Conf) = CS .

  op getNodesCell : Config -> Config .
  eq getNodesCell([ nodes : CS ] Conf) = [ nodes : CS ] .

  op getCells : CellId Config -> Config .
  eq getCells(C, [ C : AS  ] Conf) = [ C : AS  ] getCells(C,Conf) .
  eq getCells(C, [ C : EL  ] Conf) = [ C : EL  ] getCells(C,Conf) .
  eq getCells(C, [ C : CS  ] Conf) = [ C : CS  ] getCells(C,Conf) .
  eq getCells(C, [ C : TL  ] Conf) = [ C : TL  ] getCells(C,Conf) .
  eq getCells(C, [ C : GEN ] Conf) = [ C : GEN ] getCells(C,Conf) .
  eq getCells(C, Conf) = mtsoup [owise] .

  op getMacroacts : Config -> ActionSet .
  eq getMacroacts([ macroacts : AS ] Conf) = AS .

  op getMicroacts : Config -> ActionSet .
  eq getMicroacts([ microacts : AS ] Conf) = AS .

  op getObject : Oid Configuration -> Object .
  eq getObject(OId, < OId : CId | AtS > CS) = < OId : CId | AtS > .

  op getOid : Object -> Oid .
  eq getOid(< OId : CId | AtS >) = OId .

  op getCid : Object -> Cid .
  eq getCid(< OId : CId | AtS >) = CId .

  op getAttrs : Object -> AttributeSet .
  eq getAttrs(< OId : CId | AtS >) = AtS .

  vars AS AS'     : ActionSet .
  vars C          : CellId .
  vars Conf Conf' : Config .
  vars CS CS'     : Configuration .
  vars EL EL'     : EnvironmentList .
  vars GEN GEN'   : ExternalInputGenerator .
  vars TL TL'     : TraceList .
  vars OId        : Oid .
  vars CId        : Cid .
  vars AtS        : AttributeSet .

endm

mod SEQUENCE-GENERATOR is
  pr CONFIG .
  pr EXTERNAL-INPUT-LIST .

  sort GeneratorStatus .
  ops uninitialized firstIteration started cleaning : -> GeneratorStatus .

  op sequenceGenerator : EInputsList -> ExternalInputGenerator .
  eq sequenceGenerator(EIL) = sequenceGenerator(EIL,uninitialized) .

  op sequenceGenerator : EInputsList GeneratorStatus -> ExternalInputGenerator [ctor] .
  eq generate(sequenceGenerator(EInput # EIL, started),Conf) = EInput .
  eq update(sequenceGenerator(EIL,uninitialized),Conf) = sequenceGenerator(EIL,started) .
  eq update(sequenceGenerator(EInput # EIL,started),Conf) = sequenceGenerator(EIL,started) .
  eq update(sequenceGenerator(nilEInputsList,GS:GeneratorStatus),Conf) = noEnvGen .
  eq isConsumed?(sequenceGenerator(EInput # EIL,GS:GeneratorStatus),Conf) = false .
  eq isConsumed?(sequenceGenerator(EIL,GS:GeneratorStatus),Conf) = true [owise] .

  op sequenceGenerator : EnvironmentList -> ExternalInputGenerator [ctor] .
  eq generate(sequenceGenerator(E:Environment # EL),Conf) = noExternalInputs .
  eq update(sequenceGenerator(E:Environment # EL),Conf) = sequenceGenerator(EL) .
  eq isConsumed?(sequenceGenerator(E:Environment # EL),Conf) = false .
  eq isConsumed?(sequenceGenerator(EL),Conf) = true [owise] .

  vars Conf  : Config .
  vars EInput EInput' EInput'' EInput''' : ExternalInputs .
  vars EIL : EInputsList .
  vars EL    : EnvironmentList .
  vars GenStatus : GeneratorStatus .
endm

mod COMMAND-ACK-GENERATOR is
  protecting SEQUENCE-GENERATOR .

  *** Command Ack Generator
  op commandAckGenerator : ExternalInputs Nat -> ExternalInputGenerator .
  op commandAckGenerator : ExternalInputs Config Nat Nat GeneratorStatus -> ExternalInputGenerator .
  eq commandAckGenerator(EInput,Ites) = commandAckGenerator(EInput,mtsoup,Ites,0,uninitialized) .

  eq generate(commandAckGenerator(EInput,PrevConf,Ites,It,firstIteration),Conf) = EInput .
  eq generate(commandAckGenerator(EInput,PrevConf,Ites,It,started),Conf) =
      if isConsumed?(commandAckGenerator(EInput,PrevConf,Ites,It,started),Conf)
      then nilEInputsList
      else computeCommandAcks(Conf)
      fi .

  eq update(commandAckGenerator(EInput,PrevConf,Ites,0,uninitialized),Conf) = commandAckGenerator(EInput,Conf,Ites,0,firstIteration) .
  eq update(commandAckGenerator(EInput,PrevConf,Ites,0,firstIteration),Conf) = commandAckGenerator(EInput,Conf,Ites,1,started) .
  eq update(commandAckGenerator(EInput,PrevConf,Ites,It,started),Conf) = commandAckGenerator(EInput,Conf,Ites,s It,started) .

  eq isConsumed?(commandAckGenerator(EInput,PrevConf,Ites,It,GenStatus),Conf) = Ites <= It .

  *** Command Ack Generator Extended
  op commandAckGeneratorEx : ExternalInputs ExternalInputs Nat -> ExternalInputGenerator .
  op commandAckGeneratorEx : ExternalInputs ExternalInputs Nat Nat GeneratorStatus -> ExternalInputGenerator .
  eq commandAckGeneratorEx(EInput,EInput',Ites) = commandAckGeneratorEx(EInput,EInput',Ites,0,uninitialized) .

  var GEN : ExternalInputGenerator .
  var EIL'' : EInputsList .

  eq [command-ack-generator-generate-firstIteration] : generate(commandAckGeneratorEx(EInput,EInput',Ites,It,firstIteration),Conf) = EInput .
  ceq [command-ack-generator-generate-cleaning] : generate(GEN,Conf) = EIL'
    if commandAckGeneratorEx(EInput,EInput',Ites,It,cleaning) := GEN
    /\ EInput'' := computeCommandAcks(Conf)
    /\ EIL' := if isConsumed?(GEN,Conf)
                then nilEInputsList
                else EInput''
                fi
  .
  ceq [command-ack-generator-generate-started] : generate(GEN,Conf) = EIL''
    if commandAckGeneratorEx(EInput,EInput',Ites,It,started) := GEN
    /\ EInput'' := computeCommandAcks(Conf)
    /\ EIL := computeLookupCombinations(EInput')
    /\ EIL' := add(EInput'',EIL,nilEInputsList)
    /\ EIL'' := if isConsumed?(GEN,Conf)
                then nilEInputsList
                else EIL'
                fi
    [owise]
    .

  eq update(commandAckGeneratorEx(EInput,EInput',Ites,0,uninitialized),Conf) = commandAckGeneratorEx(EInput,EInput',Ites,0,firstIteration) .
  eq update(commandAckGeneratorEx(EInput,EInput',Ites,0,firstIteration),Conf) = commandAckGeneratorEx(EInput,EInput',Ites,1,started) .
  ceq update(GEN,Conf) =
      if Ites == s It
      then commandAckGeneratorEx(EInput,noExternalInputs,s s s Ites, s It, cleaning)
      else commandAckGeneratorEx(EInput,EInput',Ites,s It,started)
      fi
    if commandAckGeneratorEx(EInput,EInput',Ites,It,started) := GEN .
  ceq update(GEN,Conf) =
      if Ites == s It
      then noEnvGen
      else commandAckGeneratorEx(EInput,EInput',Ites,s It,cleaning)
      fi
    if commandAckGeneratorEx(EInput,EInput',Ites,It,cleaning) := GEN [owise] .

  eq isConsumed?(commandAckGeneratorEx(EInput,EInput',Ites,It,GenStatus),Conf) = Ites <= It .

  *** Infinite Command Ack Generator Extended
  op infiniteCommandAckGeneratorEx : ExternalInputs EInputsList -> ExternalInputGenerator .
  op infiniteCommandAckGeneratorEx : ExternalInputs EInputsList GeneratorStatus -> ExternalInputGenerator .
  eq infiniteCommandAckGeneratorEx(EInput,EILRef) = infiniteCommandAckGeneratorEx(EInput,EILRef,uninitialized) .

  eq generate(infiniteCommandAckGeneratorEx(EInput,EILRef,uninitialized),Conf) = nilEInputsList .
  eq generate(infiniteCommandAckGeneratorEx(EInput,EILRef,firstIteration),Conf) = EInput .
  ceq generate(infiniteCommandAckGeneratorEx(EInput,EILRef,started),Conf)
    = EIL'
    if EInput'' := computeCommandAcks(Conf)
    /\ EIL := undup(computeLookupCombinationsEx(EILRef))
    /\ EIL' := add(EInput'',EIL,nilEInputsList)
  .

  eq update(infiniteCommandAckGeneratorEx(EInput,EILRef,uninitialized),Conf) = infiniteCommandAckGeneratorEx(EInput,EILRef,firstIteration) .
  eq update(infiniteCommandAckGeneratorEx(EInput,EILRef,firstIteration),Conf) = infiniteCommandAckGeneratorEx(EInput,EILRef,started) .
  eq update(infiniteCommandAckGeneratorEx(EInput,EILRef,started),Conf) = infiniteCommandAckGeneratorEx(EInput,EILRef,started) .

  eq isConsumed?(infiniteCommandAckGeneratorEx(EInput,EILRef,GenStatus),Conf) = false .

  *** Common functions
  op computeCommandAcks : Config -> ExternalInputs .
  eq computeCommandAcks( [ interface : < CmdId . Q : command-on-execution | arguments: Args, handle: nothing, AtS > CS ] Conf )
      = commandAck(CmdId, Args, CommandSuccess) computeCommandAcks([ interface : CS ]) .
  eq computeCommandAcks( Conf )
      = noExternalInputs [owise] .

  op computeLookupCombinations : ExternalInputs -> EInputsList .
  eq computeLookupCombinations(ExIn) = computeLookupCombinations(ExIn,noExternalInputs) .

  op computeLookupCombinations : ExternalInputs EInputsList -> EInputsList .
  eq computeLookupCombinations(In ExIn,ExInLst)
      = computeLookupCombinations(ExIn, combine(In,ExInLst,nilEInputsList)) .
  eq computeLookupCombinations(noExternalInputs,ExInLst)
      = ExInLst .

  op computeLookupCombinationsEx : EInputsList -> EInputsList .
  eq computeLookupCombinationsEx(EILRef) = computeLookupCombinationsEx(EILRef,noExternalInputs) .

  op computeLookupCombinationsEx : EInputsList EInputsList -> EInputsList .
  ceq computeLookupCombinationsEx(ExIn # EILRef,ExInLst)
      = computeLookupCombinationsEx(EILRef, combineEx(EIL,ExInLst,nilEInputsList))
    if EIL := computeLookupCombinations'(ExIn)
  .
  eq computeLookupCombinationsEx(nilEInputsList,ExInLst)
      = ExInLst .

  op computeLookupCombinations' : ExternalInputs -> EInputsList .
  eq computeLookupCombinations'(In ExIn) = In # computeLookupCombinations'(ExIn) .
  eq computeLookupCombinations'(noExternalInputs) = noExternalInputs .

  op toEInputsList : ExternalInputs -> EInputsList .
  eq toEInputsList(ExIn) = toEInputsList(ExIn,nilEInputsList) .

  op toEInputsList : ExternalInputs EInputsList -> EInputsList .
  eq toEInputsList(In ExIn,ExInLstAcc) = toEInputsList(ExIn,In # ExInLstAcc) .
  eq toEInputsList(noExternalInputs,ExInLstAcc) = noExternalInputs # ExInLstAcc .

  op combine : ExternalInputs EInputsList EInputsList -> EInputsList .
  eq combine(EIns,ExIn # ExInLst, ExInLstAcc)
      = combine(EIns,ExInLst,(EIns ExIn) # ExIn # ExInLstAcc) .
  eq combine(EIns,nilEInputsList, ExInLstAcc)
      = ExInLstAcc [owise] .

  op combineEx : EInputsList EInputsList EInputsList -> EInputsList .
  eq combineEx(ExIn # ExInLst,EILRef, ExInLstAcc)
      = combineEx(ExInLst,EILRef,combine(ExIn,EILRef,ExInLstAcc)) .
  eq combineEx(nilEInputsList,EILRef, ExInLstAcc)
      = ExInLstAcc [owise] .

  op undup : EInputsList -> EInputsList .
  eq undup(EInLst:EInputsList # EIns # EInLst':EInputsList # EIns # EInLst'':EInputsList)
   = undup(EInLst:EInputsList # EIns # EInLst':EInputsList # EInLst'':EInputsList) .
  eq undup(EInLst:EInputsList # noExternalInputs # EInLst':EInputsList)
   = undup(EInLst:EInputsList #                    EInLst':EInputsList) .
  eq undup(EIL) = EIL [owise] .

  op add : ExternalInputs EInputsList -> EInputsList .
  eq add(EInput,ExInLst) = add(EInput,ExInLst,nilEInputsList) .

    op add : ExternalInputs EInputsList EInputsList -> EInputsList .
    eq add(EInput,ExIn # ExInLst, ExInLstAcc) = add(EInput,ExInLst,(EInput ExIn) # ExInLstAcc) .
    eq add(EInput,nilEInputsList, ExInLstAcc) = ExInLstAcc .

  vars Args  : Arguments .
  vars AtS   : AttributeSet .
  vars CS    : Configuration .
  vars Q     : Qualified .
  vars CmdId : Identifier .
  vars Conf Conf' : Config .
  vars EInput EInput' EInput'' EInput''' : ExternalInputs .
  vars EIL : EInputsList .
  vars It Ites : Nat .
  vars PrevConf : Config .
  vars EILChosen : ExternalInputs .
  vars EIL' : EInputsList .
  vars EILRef : EInputsList .
  vars GenStatus : GeneratorStatus .
  vars In : Input .
  vars EIns : ExternalInputs .
  vars ExIn : ExternalInputs .
  vars ExInLst ExInLstAcc : EInputsList .
endm

mod SYSTEM-STRUCTURE is
  pr CONFIG .
  pr ENVIRONMENTS .
  pr ENVIRONMENT .
  pr EXTERNAL-INPUT-LIST .
  pr EMPTY-GENERATOR .
  pr SEQUENCE-GENERATOR .
  pr COMMAND-ACK-GENERATOR .

  sort GlobalConfig .

  sort Operation .
  ops start stop quiescence micro macro : -> Operation .
  op _|_ : Operation Config -> GlobalConfig .

  *** Observers
  op getConfig : GlobalConfig -> Config .
  eq getConfig(Op | Conf) = Conf .

  op getOperation : GlobalConfig -> Operation .
  eq getOperation(Op | Conf) = Op .

  vars Conf  : Config .
  vars EL    : EnvironmentList .
  vars Op    : Operation .
endm

mod SYSTEM is
  protecting SYSTEM-STRUCTURE .
endm