fmod PRIMITIVE-VALUE is
 protecting INT .
 protecting FLOAT .
 protecting STRING .
 sort PrimitiveValue .
 sorts   IntValue BoolValue FloatValue StringValue .
 subsort IntValue BoolValue FloatValue StringValue < PrimitiveValue .

 sort Value .
 subsort PrimitiveValue < Value .

 op val : Int    -> IntValue .
 op val : Bool   -> BoolValue .
 op val : Float  -> FloatValue .
 op val : String -> StringValue .

 ops unknownInt abortedInt defaultInt : -> IntValue .
 ops unknownBool abortedBool defaultBool : -> BoolValue .
 ops unknownFloat abortedFloat defaultFloat : -> FloatValue .
 ops unknownString abortedString defaultString : -> StringValue .
 ops unknown aborted default : -> PrimitiveValue .
 op unknownUnknown : -> Value .
endfm

view PrimitiveValue from TRIV to PRIMITIVE-VALUE is
 sort Elt to PrimitiveValue .
endv

fmod VALUE is
 protecting PRIMITIVE-VALUE .
 protecting CONVERSION .

 sort ArrayValue .
 subsort ArrayValue < Value .

 sort IntArray .
 subsort IntValue < IntArray .
 op mtIntArray : -> IntArray [ctor] .
 op _#_ : IntArray IntArray -> IntArray [assoc] .

 sort BoolArray .
 subsort BoolValue < BoolArray .
 op mtBoolArray : -> BoolArray [ctor] .
 op _#_ : BoolArray BoolArray -> BoolArray [assoc] .

 sort FloatArray .
 subsort FloatValue < FloatArray .
 op mtFloatArray : -> FloatArray [ctor] .
 op _#_ : FloatArray FloatArray -> FloatArray [assoc] .

 sort StringArray .
 subsort StringValue < StringArray .
 op mtStringArray : -> StringArray [ctor] .
 op _#_ : StringArray StringArray -> StringArray [assoc] .

 op array : IntArray    -> ArrayValue .
 op array : BoolArray   -> ArrayValue .
 op array : FloatArray  -> ArrayValue .
 op array : StringArray -> ArrayValue .
 *** sorts   BoolArrayValue IntArrayValue FloatArrayValue StringArrayValue .
 *** subsort BoolArrayValue IntArrayValue FloatArrayValue StringArrayValue < ArrayValue .

 *** op val : Array       -> ArrayValue       .
 *** op val : IntArray    -> IntArrayValue    .
 *** op val : BoolArray   -> BoolArrayValue   .
 *** op val : FloatArray  -> FloatArrayValue  .
 *** op val : StringArray -> StringArrayValue .

 *** sorts Array IntArray BoolArray FloatArray StringArray .
 *** subsort IntArray BoolArray FloatArray StringArray < Array .
 *** op array : List{PrimitiveValue} NzNat -> Array .
 *** op array : List{IntValue} NzNat -> IntArray .

 op unknownIntArray : Nat -> ArrayValue .
 eq unknownIntArray(N:Nat) = array(unknownInt # unknownInt # unknownInt # unknownInt) .
 op unknownBoolArray : Nat -> ArrayValue .
 eq unknownBoolArray(N:Nat) = array(unknownBool # unknownBool # unknownBool # unknownBool) .
 op unknownRealArray' : Nat -> FloatArray .
 eq unknownRealArray'(s Nz) = unknownFloat # unknownRealArray'(Nz) .
 op unknownRealArray : Nat -> ArrayValue .
 eq unknownRealArray(N:Nat) = array(unknownFloat # unknownFloat # unknownFloat # unknownFloat) .

 --- eq unknownRealArray(N:NzNat) = unknownFloat .
 op unknownFloatArray : Nat -> ArrayValue .
 eq unknownFloatArray(N:Nat) = array(unknownFloat # unknownFloat # unknownFloat # unknownFloat) .
 --- eq unknownFloatArray(N:NzNat) = unknownFloat .
 op unknownStringArray : Nat -> ArrayValue .
 eq unknownStringArray(N:Nat) = array(unknownString # unknownString # unknownString # unknownString) .
 --- eq unknownStringArray(N:NzNat) = unknownString .

 vars FV FV' : FloatValue .
 vars SV SV' : StringValue .
 vars BV BV' : BoolValue .
 vars IV IV' : IntValue .
 vars BArr : BoolArray .
 vars IArr : IntArray .
 vars SArr : StringArray .
 vars FArr : FloatArray .
 vars N N' : Nat .
 vars Nz Nz' : NzNat .
 vars I I' : Int .
 vars Arr : ArrayValue .

 op updateArray : ArrayValue Nat PrimitiveValue -> ArrayValue .
 eq updateArray(array(FArr),N,FV) = array(updateFloatArray(FArr,N,FV)) .
 eq updateArray(array(FArr),N,val(I)) = array(updateFloatArray(FArr,N,val(float(I)))) . --- [print "\n\n\nupdateArray(array(" FArr ")," N ",val(" I "))\n\n\n" ] .
 *** eq updateArray(array(FArr),N,FV) = array(updateStringArray(FArr,N,FV)) .
 *** eq updateArray(array(FArr),N,FV) = array(updateBoolArray(FArr,N,FV)) .
 *** eq updateArray(array(FArr),N,FV) = array(updateIntArray(FArr,N,FV)) .

 op updateFloatArray : FloatArray Nat FloatValue -> FloatArray .
 eq updateFloatArray(FV,0, FV') = FV' .
 eq updateFloatArray(FV # FArr, s N, FV') = FV # updateFloatArray(FArr, N, FV') .
 eq updateFloatArray(FV # FArr,   0, FV') = FV' # FArr .

 op nth : ArrayValue Int -> PrimitiveValue .
 eq nth(Arr,I) = nth'(Arr,abs(I)) .
 op nth' : ArrayValue Nat -> PrimitiveValue .
 eq nth'(array(mtFloatArray),N) = unknownFloat .
 eq nth'(array(FV),0) = FV .
 eq nth'(array(FV),s N) = unknownFloat .
 eq nth'(array(FV # FArr),0) = FV .
 eq nth'(array(FV # FArr),s N) = nth'(array(FArr),N) .
 eq nth'(array(mtBoolArray),N) = unknownBool .
 eq nth'(array(BV),0) = BV .
 eq nth'(array(BV),s N) = unknownBool .
 eq nth'(array(BV # BArr),0) = BV .
 eq nth'(array(BV # BArr),s N) = nth'(array(BArr),N) .
 eq nth'(array(mtStringArray),N) = unknownString .
 eq nth'(array(SV),0) = SV .
 eq nth'(array(SV),s N) = unknownString .
 eq nth'(array(SV # SArr),0) = SV .
 eq nth'(array(SV # SArr),s N) = nth'(array(SArr),N) .
 eq nth'(array(mtIntArray),N) = unknownInt .
 eq nth'(array(IV),0) = IV .
 eq nth'(array(IV),s N) = unknownInt .
 eq nth'(array(IV # IArr),0) = IV .
 eq nth'(array(IV # IArr),s N) = nth'(array(IArr),N) .

endfm

view Value from TRIV to VALUE is
 sort Elt to Value .
endv

fmod ARGUMENTS is
 protecting LIST{Value} * ( sort List{Value} to Arguments ,
                            op nil to nilarg ) .
endfm
