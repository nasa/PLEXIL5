mod INTERFACE is
  pr DEFS .

  vars Cfg             : Config .
  vars Env Env' AccEnv : Environment .
  vars EInput EInput'  : ExternalInputs .
  vars EIns            : EInputsList .
  vars NeEInput        : NeExternalInputs .
  vars CmdInput        : CommandInput .
  vars V V' V''        : Value .
  vars CmdId           : Identifier .
  vars Cmds Cmds'      : Configuration .
  vars MEM AccCmds     : Configuration .
  vars Hndl Hndl'      : CommandHandle .
  vars Hndl?           : Maybe{CommandHandle} .
  vars Args            : Arguments .
  vars V?              : Maybe{Value} .
  vars Q Q'            : Qualified .
  vars AtS AtS'        : AttributeSet .
  vars In              : Input .

  var GEN : ExternalInputGenerator .

  op updateInterface : Config ExternalInputs -> Config .
  eq updateInterface(
      [ environment : Env ]
      [ interface : Cmds ]
      [ memory : MEM ]
      Cfg,
      EInput)
    = [ environment : updateInternalEnvironment(Env, getLookups(EInput), mtenvironment) ]
      [ interface : updateCommandInputs(Cmds, getCommandInputs(EInput)) ]
      [ memory : updateCommandValues(Cmds,MEM, getCommandValues(EInput)) ]
      updateInterfaceHistory(Cfg,EInput)
  .

  op interface-history : -> CellId .
  op `[_:_`] : CellId EInputsList -> Cell [format (n d d ++i --i d)] .

  op updateGenerator : Config ExternalInputs -> Config .
  eq updateGenerator(
      Cfg [ generator : GEN ],
      EInput )
    = Cfg [ generator : update( GEN, [ generator : GEN ] Cfg, EInput ) ] .

  op updateInterfaceHistory : Config ExternalInputs -> Config .
  eq updateInterfaceHistory(
      [ interface-history : EIns ]
      Cfg,
      EInput )
    = [ interface-history : EInput EIns ]
      Cfg .
  eq updateInterfaceHistory(Cfg,EInput) = [ interface-history : EInput ] Cfg [owise] .

  op getLookups : ExternalInputs -> ExternalInputs .
  eq getLookups(EInput stateLookup(Q,Args,V) EInput') = stateLookup(Q,Args,V) getLookups(EInput EInput') .
  eq getLookups(EInput) = noExternalInputs [owise] .

  op getCommandInputs : ExternalInputs -> ExternalInputs .
  eq getCommandInputs(commandAck(CmdId,Args,Hndl) EInput) = commandAck(CmdId,Args,Hndl) getCommandInputs(EInput) . --- [print "getCommandInputs1(" CmdId "," Args "," Hndl ")"] .
  eq getCommandInputs(commandAbort(CmdId,Args,V) EInput) = commandAbort(CmdId,Args,V) getCommandInputs(EInput) .
  eq getCommandInputs(noExternalInputs) = noExternalInputs .
  eq getCommandInputs(In EInput) = getCommandInputs(EInput) [owise] .

  op getCommandValues : ExternalInputs -> ExternalInputs .
  eq getCommandValues(commandResult(CmdId,Args,V) EInput) = commandResult(CmdId,Args,V) getCommandValues(EInput) .
  eq getCommandValues(EInput) = noExternalInputs [owise] .

  op updateInternalEnvironment : Environment ExternalInputs Environment -> Environment .
  eq updateInternalEnvironment(
    ((Q(Args) : V)  , Env),
    (stateLookup(Q,Args,V') EInput),
    AccEnv
  )
  =
    updateInternalEnvironment(Env, EInput, ((Q(Args) : V') , AccEnv))
  .
  eq updateInternalEnvironment(
    Env,
    (stateLookup(Q,Args,V) EInput),
    AccEnv
  )
  =
    updateInternalEnvironment(Env, EInput, ((Q(Args) : V) , AccEnv))
  [owise]
  .
  eq updateInternalEnvironment(Env, (CmdInput EInput), AccEnv) = updateInternalEnvironment(Env,EInput,AccEnv) .
  eq updateInternalEnvironment(Env, noExternalInputs, AccEnv) = Env , AccEnv .

  --- TODO: Check the semantics to model if it is possible for two different commandAck that were supposed to be for different command instances to work on only one .
  --- TODO: We assume this is deterministic .
  op updateCommandHandles : Configuration ExternalInputs -> Configuration .
  eq updateCommandHandles(
    < CmdId . Q : command-on-execution | arguments: Args, handle: Hndl?, AtS > Cmds,
    (commandAck(CmdId, Args, Hndl') EInput)
  )
  =
    < CmdId . Q : command-on-execution | arguments: Args, handle: just(Hndl'), AtS >
    updateCommandHandles(Cmds,EInput)
  .
  eq updateCommandHandles(Cmds, (commandAck(CmdId, Args, Hndl') EInput)) = updateCommandHandles(Cmds, EInput) [owise] .
  eq updateCommandHandles(Cmds,noExternalInputs) = Cmds .

  op updateCommandValues : Configuration Configuration ExternalInputs -> Configuration .
  eq updateCommandValues(
    < CmdId . Q : command-on-execution | arguments: Args, returnVariable: Q', AtS > Cmds,
    < Q' : memory | actVal: V, prevVal: V', AtS' > MEM,
    (commandResult(CmdId, Args, V'') EInput)
  )
  =
    < Q' : memory | actVal: V'', prevVal: V, AtS' >
    updateCommandValues(Cmds,MEM,EInput)
  .
  eq updateCommandValues(Cmds,MEM,noExternalInputs) = MEM .
  eq updateCommandValues(Cmds,MEM,EInput) = MEM [owise print "Could not match: " EInput " with any running command in " Cmds] .

  op updateCommandInputs : Configuration ExternalInputs -> Configuration .
  eq updateCommandInputs( Cmds, (commandAck(CmdId, Args, Hndl') EInput))
    = updateCommandHandles( Cmds, (commandAck(CmdId, Args, Hndl') EInput)) .
  eq updateCommandInputs(
    < CmdId . Q : command-on-execution | arguments: Args, aborted: false, AtS > Cmds,
    (commandAbort(CmdId, Args, V) EInput)
  )
  =
    < CmdId . Q : command-on-execution | arguments: Args, aborted: true, AtS > .
  eq updateCommandInputs(Cmds, (commandAbort(CmdId, Args, V) EInput)) = updateCommandInputs(Cmds, EInput) .
  eq updateCommandInputs(Cmds, noExternalInputs) = Cmds .

endm