in ../../lib/test/test.maude
in ../../src/plexilite.maude
in ./base.maude
in ./atomic/test.maude
in ./reductions/test.maude
in ./expressions/test.maude
in ./model-checking.maude
in ./compiler/test.maude

mod TEST-SUITE is

  pr TEST--ATOMIC .
  pr TEST--REDUCTIONS .
  pr TEST--EXPRESSIONS .
  pr TEST--MODEL-CHECKING .
  pr TEST--COMPILER .

  eq tests =
    AllTestsPassed
    + atomic--tests
    + reductions--tests
    + expressions--tests
    + model-checking--tests
    + compiler--tests
    +
begin tests

    assert "An Update node" from
      testConfiguration(
        < 'anUpdate : update |
          pairs: (pair('val,const(val("foo"))) pair('taskId,var('waypointId))),
          ack: false >
      )
    reaches
      testConfiguration(
        < 'anUpdate : update |
          pairs: (pair('val,const(val("foo"))) pair('taskId,var('waypointId))),
          ack: false >
      )
    end

    assert "Compile Update node 1" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, none, pair('taskId,var('waypointId))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "Compile Update node 2" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, endc: const(val(false)), pair('taskId,var('waypointId))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(false)) and hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "Compile Update node with multiple pairs" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, endc: const(val(false)), pair('taskId,var('waypointId)) pair('taskId2,var('waypointId2))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)) pair('taskId2,var('waypointId2)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(false)) and hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "Compile Command node 1" from
      testConfiguration(
        compileNodes(command('anId, nilocdecl, endc: const(val(false)), 'boolArrayCommand / nilpar / 'myBooleanArray), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : command |
          defaultInternalAttributes,
          command: 'boolArrayCommand / nilpar / 'myBooleanArray,
          commandInfo: nilarg / 'anId / idle,
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(false)) or (cmdHandleIs?('anId . 'aRootId, CommandDenied) or cmdHandleIs?('anId . 'aRootId, CommandFailed))
        >
      )
    end

    assert "Compile Command node 2" from
      testConfiguration(
        compileNodes(command('anId, nilocdecl, endc: const(val(true)), 'boolArrayCommand / nilpar / 'myBooleanArray), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : command |
          defaultInternalAttributes,
          command: 'boolArrayCommand / nilpar / 'myBooleanArray,
          commandInfo: nilarg / 'anId / idle,
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(true)) or (cmdHandleIs?('anId . 'aRootId, CommandDenied) or cmdHandleIs?('anId . 'aRootId, CommandFailed))
        >
      )
    end

    assert "CommandAbort 1" from
      testConfiguration(
        updateCommandInputs(
          < 'anId . 'aRootId : command-on-execution | arguments: nilarg, aborted: false >,
          (commandAbort('anId, nilarg, val(true)))
        )
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : command-on-execution | arguments: nilarg, aborted: true >
      )
    end

    assert "CommandAck 1" from
      testConfiguration(
        updateCommandInputs(
          < 'anId . 'aRootId : command-on-execution | arguments: nilarg, handle: nothing >,
          (commandAck('anId, nilarg, CommandDenied))
        )
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : command-on-execution | arguments: nilarg, handle: just(CommandDenied) >
      )
    end

end tests
.

endm

set show stats   off .
set show command off .
set show timing  off .

load ../../lib/test/test-runner.maude

reduce in TEST-RUNNER : runTests .
