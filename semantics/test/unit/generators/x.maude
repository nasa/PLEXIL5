mod TEST--GENERATORS--X is
  protecting TEST-BASE .

  op test--generators--x : -> TestResults .
  ceq test--generators--x =
begin tests

  assert "generate _x_ InputGenerator combinator with sequences" from
    anInputsSet(
      generate(
        sequenceGenerator(A # B, started, mtsoup, mtsoup)
        x
        sequenceGenerator(C # D, started, mtsoup, mtsoup)
        ,
        mtsoup
      )
    )
  reaches
    anInputsSet(
      (
        A
        C
      )
    )
  end

  assert "update _x_ InputGenerator combinator with sequences" from
    aGenerator(
      update(
        sequence(A # B)
        x
        sequence(C # D)
        ,
        mtsoup
        ,
        D
      )
    )
  reaches
    aGenerator(
        sequence(B)
        x
        sequence(D)
    )
  end

  assert "generate _x_ InputGenerator combinator with nd-repeats 1" from
    anInputsSet(
      generate(
        repeat((A , B))
        x
        repeat((C , D))
        ,
        mtsoup
      )
    )
  reaches
    anInputsSet(
      (
        A C,
        A D,
        B C,
        B D
      )

    )
  end

  assert "generate _x_ InputGenerator combinator with nd-repeats 2" from
    anInputsSet(
      generate(
        repeat((A C, B))
        x
        repeat((C , B D))
        ,
        mtsoup
      )
    )
  reaches
    anInputsSet(
      (
        A C,
        A C B D,
        B C,
        B D
      )
    )
  end

end tests
  if A := stateLookup('a,nilarg, val(true))
  /\ B := stateLookup('b,nilarg, val(true))
  /\ C := stateLookup('c,nilarg, val(true))
  /\ D := stateLookup('d,nilarg, val(true))
  .

  vars A B C D : StateInput .

endm