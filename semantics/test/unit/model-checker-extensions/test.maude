in properties.maude

mod TEST--MODEL-CHECKER-EXTENSIONS is

pr TEST-BASE .
pr TEST--MODEL-CHECKER-EXTENSIONS--PROPERTIES .

op test--model-checker-extensions : -> TestResults .
eq test--model-checker-extensions
  = test--model-checker-extensions--properties
  + test--prettyPrintWithInputsOnly
.

op test--prettyPrintWithInputsOnly : -> TestResults .
eq test--prettyPrintWithInputsOnly =
begin tests

  assert "prettyPrintWithInputsOnly a counterexample without finite prefix" from
    prettyPrintWithInputsOnly(
      counterexample(
        nil
      ,
        { stop | [ interface-history :
            stateLookup('time, nilarg, val(1)) ]
        ,
          'unknownRule
        }
      )
    )
  reaches
    NoTransitions
    -->
    Loop {
      Input(
        stateLookup('time, nilarg, val(1))
      )
    }
  end

  assert "prettyPrintWithInputsOnly a counterexample with one element interface history" from
    prettyPrintWithInputsOnly(
      counterexample(
        { stop | [ interface-history :
            commandAck(A, nilarg, CommandAccepted)
            stateLookup('time, nilarg, val(0)) ]
        ,
          'unknownRule
        }
      ,
        { stop | [ interface-history :
            stateLookup('time, nilarg, val(1)) ]
        ,
          'unknownRule
        }
      )
    )
  reaches
    Input(
      commandAck(A, nilarg, CommandAccepted)
      stateLookup('time, nilarg, val(0))
    )
    -->
    Loop {
      Input(
        stateLookup('time, nilarg, val(1))
      )
    }
  end

  assert "prettyPrintWithInputsOnly a counterexample with two elements interface history" from
    prettyPrintWithInputsOnly(
      counterexample(
        { stop | [ interface-history :
            (
              commandAck(A, nilarg, CommandAccepted)
              stateLookup('time, nilarg, val(0))
            )
            #
            stateLookup('time, nilarg, val(1))
            ]
        ,
          'unknownRule
        }
      ,
        { stop | [ interface-history :
            stateLookup('time, nilarg, val(2)) ]
        ,
          'unknownRule
        }
      )
    )
  reaches
    Input(
      commandAck(A, nilarg, CommandAccepted)
      stateLookup('time, nilarg, val(0))
    )
    -->
    Loop {
      Input(
        stateLookup('time, nilarg, val(2))
      )
    }
  end

end tests .

endm