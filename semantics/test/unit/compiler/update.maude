mod TEST--COMPILER--UPDATE is

pr COMPILER .
pr TEST-BASE .

op test--compiler--update : -> TestResults .
eq test--compiler--update =
  begin tests

    assert "Compile Update node 1" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, none, pair('taskId,var('waypointId))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "Compile Update node 2" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, endc: const(val(false)), pair('taskId,var('waypointId))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(false)) and hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "Compile Update node with multiple pairs" from
      testConfiguration(
        compileNodes(update('anId, nilocdecl, endc: const(val(false)), pair('taskId,var('waypointId)) pair('taskId2,var('waypointId2))), 'aRootId)
      )
    reaches
      testConfiguration(
        < 'anId . 'aRootId : update |
          defaultInternalAttributes,
          pairs:   pair('taskId,var('waypointId)) pair('taskId2,var('waypointId2)),
          startc:  const(val(true)),
          skip:    const(val(false)),
          pre:     const(val(true)),
          inv:     const(val(true)),
          exitc:   const(val(false)),
          repeatc: const(val(false)),
          post:    const(val(true)),
          endc:    const(val(false)) and hasRcvAck?('anId . 'aRootId),
          ack: false
        >
      )
    end

    assert "compileMemory on Update nodes calls createLocalVars" from
      aConfiguration(
        compileMemory(
          update(
            'A,
            ('src : createArray(2 , val (5.0) # val (6.0))),
            none,
            pair('val,arrayVar('src))
          ),
          'C
        )
      )
    reaches
      aConfiguration(
        createLocalVars(
          'A . 'C,
          ('src : createArray(2 , val (5.0) # val (6.0)))
        )
      )
    end

  end tests
 .
endm