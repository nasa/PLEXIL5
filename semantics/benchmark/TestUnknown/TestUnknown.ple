String Command get_string ();
Integer Command get_int ();
Real Command get_real ();
Boolean Command get_bool ();
Command pprint (...);
Real Lookup r1;
Real Lookup r2;
Integer Lookup i1;
Integer Lookup i2;
String Lookup s1;
String Lookup s2;
Boolean Lookup b1;
Boolean Lookup b2;

TestUnknown:
{
  Real r, r1, r2;
  Integer i, i1, i2;
  String s, s1, s2;
  Boolean b, b1, b2;

  TestVars1: Concurrence {
    PostCondition (isKnown(r1) && r1==0.0 &&
                   isKnown(i1) && i1==0 &&
                   isKnown(s1) && s1=="foo" &&
                   isKnown(b1) && b1 &&
                   !isKnown(r2) && !isKnown(i2) && !isKnown(s2) && !isKnown(b2));
    r1 = Lookup(r1);
//    if (isKnown(r1)) pprint("r1: ", r1); endif
    r2 = Lookup(r2);
//    if (isKnown(r2)) pprint("r2: ", r2); endif
    i1 = Lookup(i1);
//    if (isKnown(i1)) pprint("i1: ", i1); endif    
    i2 = Lookup(i2);
//    if (isKnown(i2)) pprint("i2: ", i2); endif    
    s1 = Lookup(s1);
//    if (isKnown(s1)) pprint("s1: ", s1); endif        
    s2 = Lookup(s2);
//    if (isKnown(s2)) pprint("s2: ", s2); endif    
    b1 = Lookup(b1);
//    if (isKnown(b1)) pprint("b1: ", b1); endif        
    b2 = Lookup(b2);
//    if (isKnown(b2)) pprint("b2: ", b2); endif    
  }

  TestString1 : {
    PostCondition isKnown(s) && s=="yes";
    s = get_string ();
  }

  TestString2 : {
    PostCondition ! isKnown(s);
    s = get_string ();
  }

  TestInt1 : {
    PostCondition isKnown(i) && i==1;
    i = get_int ();
//    pprint ("i:", i);
  }

  TestInt2 : {
    PostCondition ! isKnown(i);
    i = get_int ();
  }

  TestReal1 : {
    PostCondition isKnown(r) && r==1.0;
    r = get_real ();
//    pprint ("r:", r);    
  }

  TestReal2 : {
    PostCondition ! isKnown(r);
    r = get_real ();
  }

  TestBool1 : {
    PostCondition isKnown(b) && !b;
    b = get_bool ();
//    pprint ("b:", b);        
  }

  TestBool2 : {
    PostCondition ! isKnown(b);
    b = get_bool ();
  }

  // The following action does not succeed.  For some reason, s1 and b1 do not
  // receive their new values.  This happens for the first two "_1" variables,
  // regardless of how you order them.
  
  // TestVars2: Concurrence {
  //   PostCondition (isKnown(r2) && r2==0.0 &&
  //                  isKnown(i2) && i2==0 &&
  //                  isKnown(s2) && s2=="foo" &&
  //                  isKnown(b2) && b2 &&
  //                  !isKnown(r1) && !isKnown(i1) && !isKnown(s1) && !isKnown(b1));
  //   s2 = Lookup(s2);
  //   s1 = Lookup(s1);
  //   b1 = Lookup(b1);
  //   b2 = Lookup(b2);
  //   r1 = Lookup(r1);
  //   r2 = Lookup(r2);
  //   i1 = Lookup(i1);
  //   i2 = Lookup(i2);
  // }

}
